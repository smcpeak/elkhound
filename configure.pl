#!/usr/bin/perl -w
# configure script for elkhound

use strict 'subs';


sub run {
  my $code = system(@_);
  checkExitCode($code);
}

sub checkExitCode {
  my ($code) = @_;
  if ($code != 0) {
    # hopefully the command has already printed a message,
    # I'll just relay the status code
    if ($code >> 8) {
      exit($code >> 8);
    }
    else {
      exit($code & 127);
    }
  }
}


# defaults
%flags = (
  "loc" => 1,

  "eef" => 0,
  "gcs" => 0,
  "gcsc" => 0,
  "crs" => 0,

  "subconfigure" => 1
);

# arguments to pass to sub-configures
@c_args = ();

@DEFINES = ();


# copy from %flags to individual global variables
sub copyFlagsToGlobals {
  $loc = $flags{loc};

  $eef = $flags{eef};
  $gcs = $flags{gcs};
  $gcsc = $flags{gcsc};
  $crs = $flags{crs};

  $subconfigure = $flags{subconfigure};

  # test consistency of configuration
  if ($gcs && !$eef) {
    die "GCS requires EEF\n";
  }
  if ($gcsc && !$gcs) {
    die "GCSC requires GCS\n";
  }
}
copyFlagsToGlobals();


sub usage {
  print(<<"EOF");
package options:
  -loc[=0/1]:        enable/disable source location tracking [enabled]
  -action:           enable use of "-tr action" to see parser actions
  -compression[=0/1]:  enable/disable all table compression options [disabled]
    -eef[=0/1]         enable/disable EEF compression [disabled]
    -gcs[=0/1]         enable/disable GCS compression [disabled]
    -gcsc[=0/1]        enable/disable GCS column compression [disabled]
    -crs[=0/1]         enable/disable CRS compression [disabled]
  -fastest:          turn off all Elkhound features that are not present
                     in Bison, for the purpose of performance comparison
                     (note that Elsa will not work in this mode)
  -nosub:            do not invoke subdirectory configure scripts
EOF
}


# global variables holding information about the current command-line
# option being processed
$option = "";
$value = "";

# process command-line arguments
foreach $optionAndValue (@ARGV) {
  # ignore leading '-' characters, and split at first '=' (if any)
  ($option, $value) =
    ($optionAndValue =~ m/^-*([^-][^=]*)=?(.*)$/);
                      #      option     = value

  my $arg = $option;

  if (0) {
    # handled by sm_config.pm
  }

  elsif ($arg eq "loc") {
    $flags{loc} = getBoolArg();
  }

  elsif ($arg eq "action") {
    push @DEFINES, "-DACTION_TRACE=1";
  }

  elsif ($arg eq "fastest") {
    # the idea is I can say
    #   $ ./configure -fastest
    #   $ make clean; make
    #   $ ./perf -tests c -iters 5
    # to verify that I'm still within 3% of Bison (at least
    # when compiled with gcc-2.95.3)
    $flags{loc} = 0;
    push @DEFINES,
      ("-DUSE_RECLASSIFY=0",        # no token reclassification
       "-DUSE_KEEP=0",              # don't call keep() functions
       "-DNDEBUG_NO_ASSERTIONS",    # disable all xassert() calls
       "-DDO_ACCOUNTING=0",         # don't count stack nodes, etc.
       "-DENABLE_YIELD_COUNT=0");   # don't check for yield-then-merge at runtime
    push @c_args, "-DUSE_RECLASSIFY=0";
  }

  elsif ($arg eq "nosub") {
    $flags{subconfigure} = 0;
  }

  elsif ($arg =~ "compression|eef|gcs|gcsc|crs") {
    my $value = getBoolArg();

    if ($arg eq "compression") {
      $flags{eef} = $value;
      $flags{gcs} = $value;
      $flags{gcsc} = $value;
      $flags{crs} = $value;
    }
    else {
      $flags{$arg} = $value;
    }
  }

  else {
    die "unknown option: $arg\n";
  }
}

copyFlagsToGlobals();

# summarize compression flags
@compflags = ();
for $k (keys %flags) {
  if ($k eq "eef" || $k eq "gcs" || $k eq "gcsc" || $k eq "crs") {
    if ($flags{$k}) {
      push @compflags, $k;
    }
  }
}
if (@compflags) {
  $compflags = join(',', @compflags);
}
else {
  $compflags = "<none>";
}


# ------------------- config.status ------------------
# Write config.status.
open(OUT, ">config.status") or die("could not open config.status: $!\n");
print OUT (<<"OUTER_EOF");
# config.status
# Created by command: ./configure @ARGV


# ---- glrconfig.h ----
cat >glrconfig.h <<EOF
// glrconfig.h
// Do not edit; generated by 'configure'.

EOF

echo "creating glrconfig.h ..."

sed -e "s|\@GLR_SOURCELOC\@|$loc|g" \\
    -e "s|\@eef\@|$eef|g" \\
    -e "s|\@gcs\@|$gcs|g" \\
    -e "s|\@gcsc\@|$gcsc|g" \\
    -e "s|\@crs\@|$crs|g" \\
  <glrconfig.h.in >>glrconfig.h


# ---- config.mk ----
echo "creating config.mk ..."

cat >config.mk <<EOF
# elkhound/config.mk
# Do not edit; generated by 'configure'.
# Instead, create a personal.mk file for custom Makefile settings.

DEFINES = @DEFINES

# EOF
EOF


OUTER_EOF

close(OUT) or die;
chmod 0755, "config.status";


# ----------------- final actions -----------------
# invoke sub-configures
if ($subconfigure) {
  chdir("c") or die;
  my $tmp = join(' ', ("./configure", @c_args));
  print("Invoking $tmp in 'c' directory ...\n");
  run("./configure", @c_args);
  print("Finished in 'c' directory.\n");
  chdir("..") or die;
}

# run the output file generator
run("./config.status");

print("\nYou can now run make, usually called 'make' or 'gmake'.\n");

exit(0);

# EOF
