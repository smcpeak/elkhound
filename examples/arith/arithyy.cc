#line 2 "arithyy.cc"
/* arithyy.cc */
/* A lexical scanner generated by smflex. */
/* DO NOT EDIT MANUALLY. */

#include "arithyy.h"     /* yy_lexer_t */

#include <assert.h>          /* assert */
#include <limits.h>          /* INT_MAX */
#include <stdlib.h>          /* malloc, free, realloc, exit */
#include <string.h>          /* strlen, memcpy */

/* Defined within a generated scanner. */
#define SMFLEX_SCANNER

/* Version of smflex used to generate this scanner. */
#define YY_SMFLEX_MAJOR_VERSION 1
#define YY_SMFLEX_MINOR_VERSION 1


/* Returned value from yy_lex() upon end-of-file.  This macro is used
 * to make the occurrences more readily identifiable; the value must
 * be specifically 0 because that is what the documentation uses. */
#define YY_EOF_TOKEN_CODE 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition. */
#define YY_SET_START_CONDITION(s) (yy_lexer->yy_start_state = 1 + 2 * (s))

/* Translate the current start state into a value that can be later handed
 * to YY_SET_START_CONDITION to return to the state. */
#define YY_GET_START_CONDITION() ((yy_lexer->yy_start_state - 1) / 2)

/* Action number for EOF rule of a given start condition. */
#define YY_STATE_EOF(cond) (YY_END_OF_BUFFER + (cond) + 1)

/* Two copies of this character are placed into the read buffer,
 * right after the data that was read from the input.  This is used
 * to signal the state machine logic that it has reached the end of
 * the buffered data, so it must stop and read more. */
#define YY_END_OF_BUFFER_CHAR 0

/* Define a macro that, when enabled, causes certain printouts to go
 * to stdout.  The intent is to use this as part of tests in order to
 * be able to see what some of the internals are doing when there is
 * not a less intrusive method available.  The symbol
 * 'YY_ENABLE_DEBUG_LOG_CALL' must be passed as a -D argument on the
 * compiler command line to activate this. */
#ifdef YY_ENABLE_DEBUG_LOG_CALL
#  define YY_DEBUG_LOG_CALL(call, val) \
     printf("[%s: %d]\n", call, (int)(val))
#else
#  define YY_DEBUG_LOG_CALL(str, val) ((void)0)
#endif

/* A switch to control memory-related debug logs. */
#ifdef YY_ENABLE_DEBUG_LOG_MEM
#  define YY_DEBUG_LOG_MEM(str, val) \
     printf("[%s: %d]\n", str, (int)(val))
#else
#  define YY_DEBUG_LOG_MEM(str, val) ((void)0)
#endif

/* This macro is meant to be used for a label that the code generator
 * emits but is not sure will be used.  Its purpose is to suppress any
 * warnings about the label in case it is, in fact, unused. */
#ifndef YY_POSSIBLY_UNUSED_LABEL
#  ifdef __GNUC__
#    define YY_POSSIBLY_UNUSED_LABEL(label) \
       label: __attribute__((__unused__));
#  else
#    define YY_POSSIBLY_UNUSED_LABEL(label) label:
#  endif
#endif

/* This macro is placed in front of the declarations of functions that
 * may or may not be used, depending on what the user's actions do. */
#ifndef YY_POSSIBLY_UNUSED_FUNCTION
#  ifdef __GNUC__
#    define YY_POSSIBLY_UNUSED_FUNCTION __attribute__((__unused__))
#  else
#    define YY_POSSIBLY_UNUSED_FUNCTION /*nothing*/
#  endif
#endif

/* This is used for internal integrity checks that do not have a
 * significant impact on performance, so should be fine to leave
 * enabled in production usage.  If YY_ASSERT fails, it means there
 * is a bug in smflex or the API has been misused. */
#ifndef YY_ASSERT
#  define YY_ASSERT(cond) assert(cond)
#endif

/* Assert something at compile time. */
#ifndef YY_STATIC_ASSERT
#  define YY_STATIC_ASSERT(cond) ((void)(int (*)[((cond)? +1 : -1)])0)
#endif

/* Check an API precondition.  If it fails, call YY_ERROR.  If that
 * returns, the form evaluates to 0; otherwise it evaluates to 1. */
#ifndef YY_API_PRECONDITION
#  define YY_API_PRECONDITION(cond) \
     ((cond)? 1 : (YY_ERROR(yy_err_api_misuse, #cond), 0))
#endif

/* C API functions are not static. */
#define STATIC_IF_CPP /*nothing*/

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* Return all but the first 'new_yy_leng' matched characters back to the
 * input stream.  This definition only works in section 2 where the
 * local variables 'yy_cp' and 'yy_bp' are present. */
#define YY_LESS_TEXT(new_yy_leng) \
  do { \
    YY_API_PRECONDITION(0 <= new_yy_leng && new_yy_leng <= YY_LENG); \
    /* Undo effects of setting up yy_text. */ \
    *yy_cp = yy_lexer->yy_hold_char; \
    yy_lexer->yy_buf_cur_pos = yy_cp = yy_bp + new_yy_leng - YY_MORE_LEN; \
    YY_DO_BEFORE_ACTION; /* set up yy_text again */ \
  } while (0)



/* Possible values of 'yy_buf_status'. */
typedef enum yy_buf_status_enum {
  /* Indicates that the fields of 'yy_buffer_state_t' and its
   * 'yy_current_buffer' might be out of sync, and hence need fixing.
   *
   * TODO: This is ugly. */
  YY_BUF_STATUS_NEW,

  /* Normal, steady-state buffer status. */
  YY_BUF_STATUS_NORMAL,

  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_BUF_STATUS_EOF_PENDING, to indicate
   * that we shouldn't try reading from the input source any more.  We
   * might still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yy_restart()), so that the user can continue scanning by
   * just pointing 'yy_input_stream' at a new input file.
   */
  YY_BUF_STATUS_EOF_PENDING
} yy_buf_status_t;


/* This structure contains the buffer state for a particular input
 * source.  By buffering, it allows efficient access to the bytes in
 * that source one at a time; its principal operations are to get the
 * next character and to put a character back. */
struct yy_buffer_state_struct {
  /* Source from which we are reading and buffering.  Note that whether
   * we truly use this is up to 'yy_read_function'; the scanner engine
   * merely promises to pass 'yy_input_stream' to that function. */
  yy_input_stream_t *yy_input_stream;

  /* Pointer to the beginning of the input buffer.  The allocated
   * space in the buffer is 'yy_buf_alloc_size+2'.  The buffer is owned
   * by this structure if 'yy_is_our_buffer'. */
  char *yy_buffer;

  /* Allocated size of input buffer in bytes, not including room for EOB
   * characters. */
  int yy_buf_alloc_size;

  /* Number of characters read into yy_buffer, not including EOB
   * characters.
   */
  int yy_buf_data_len;

  /* Points to current character in buffer, i.e., the next character
   * to scan.
   *
   * Invariant: yy_buffer <= yy_buf_cur_pos
   * Invariant:              yy_buf_cur_pos <= yy_buffer + yy_buf_data_len + 2
   *
   * I am not sure about being able to reach the +2 location. */
  char *yy_buf_cur_pos;

  /* The relationship among the four preceding fields is summarized in
   * this diagram:
   *
   *   yy_buffer                                yy_buf_alloc_size
   *   |                                                     |
   *   V                                                     V
   *   [ already scanned   yet to scan 0 0   available space 0 0 ]
   *                       ^           ^
   *                       |           |
   *              yy_buf_cur_pos  yy_buf_data_len
   *
   * The "0 0" at yy_buf_data_len must always be there.  The "0 0" at
   * yy_buf_alloc_size is space reserved to put the zeros in when
   * yy_buf_data_len == yy_buf_alloc_size, but otherwise need not be
   * present. */

  /* The following five flags could be combined to save space, but on
   * a 64-bit platform we are committed to another at least one 64-bit
   * word beyond 'yy_buf_cur_pos', so there is no point. */

  /* Whether we're considered to be at the beginning of a line.  If so,
   * '^' rules will be active on the next match, otherwise not.
   *
   * This should be first among the flags because it is the one that is
   * accessed most frequently, so should require the fewest instructions
   * to access. */
  unsigned char /*bool*/ yy_at_bol;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can reallocate it to grow it, and should free() it to
   * delete it. */
  unsigned char /*bool*/ yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, we read
   * one character at a time to make sure we stop fetching input after
   * each newline. */
  unsigned char /*bool*/ yy_is_interactive;

  /* Whether to try to fill the input buffer when we reach the
   * end of it. */
  unsigned char /*bool*/ yy_fill_buffer;

  /* Indicates the synchronization status between 'yy_current_buffer'
   * and the fields within our own structure that track them. */
  unsigned char /*yy_buf_status_t*/ yy_buf_status;
};

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER (yy_lexer->yy_current_buffer)


#define YY_FLUSH_CURRENT_BUFFER yy_flush_buffer(yy_lexer, yy_lexer->yy_current_buffer)


/* Throughout this file, we use 'int' for sizes of objects.  That is
 * because the objects in question are expected to be buffers with
 * size on the order of 10s of KiB, such that the usual range of 'int'
 * suffices.
 *
 * Going up to 'size_t' would require making some of the fields in the
 * structures larger, which would not be a major problem but is deemed
 * unnecessary and wasteful at this time. */
static void *yy_flex_alloc(int);
static void yy_flex_free(void *);




/* Forward static declarations. */
static void yy_load_current_buffer_state(yy_lexer_t *yy_lexer);
static void yy_init_buffer(yy_lexer_t *yy_lexer, yy_buffer_state_t *b,
                           yy_input_stream_t *file);


/* If 'yy_lexer' does not have a current buffer, create one.
 * Return false if allocation failed.*/
static int yy_create_buffer_if_needed(yy_lexer_t *yy_lexer)
{
  if (!yy_lexer->yy_current_buffer) {
    yy_lexer->yy_current_buffer =
      yy_create_buffer(yy_lexer, yy_lexer->yy_input_stream, 0 /*size*/);
    if (!yy_lexer->yy_current_buffer) {
      return 0;
    }
  }
  return 1;
}


STATIC_IF_CPP void yy_set_interactive(yy_lexer_t *yy_lexer, int is_interactive)
{
  if (!yy_create_buffer_if_needed(yy_lexer)) {
    return;
  }
  YY_DEBUG_LOG_CALL("setting yy_is_interactive due to yy_set_interactive", is_interactive);
  yy_lexer->yy_current_buffer->yy_is_interactive = !!is_interactive;
}



STATIC_IF_CPP int yy_get_bol(yy_lexer_t const *yy_lexer)
{
  if (!yy_lexer->yy_current_buffer) {
    /* When we start reading, BOL will be true. */
    return 1;
  }
  else {
    return yy_lexer->yy_current_buffer->yy_at_bol;
  }
}




STATIC_IF_CPP void yy_set_bol(yy_lexer_t *yy_lexer, int at_bol)
{
  if (!yy_create_buffer_if_needed(yy_lexer)) {
    return;
  }
  yy_lexer->yy_current_buffer->yy_at_bol = !!at_bol;
}





typedef unsigned char YY_CHAR;

static yy_state_type_t yy_get_previous_state(yy_lexer_t *yy_lexer);
static yy_state_type_t yy_try_NUL_trans(yy_lexer_t *yy_lexer, yy_state_type_t current_state);
static int yy_get_next_buffer(yy_lexer_t *yy_lexer);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yy_text. */
#define YY_DO_BEFORE_ACTION                              \
  yy_lexer->yy_text = yy_bp;                             \
  yy_lexer->yy_leng = (int) (yy_cp - yy_bp);             \
  yy_lexer->yy_hold_char = *yy_cp;                       \
  *yy_cp = '\0';                                         \
  yy_lexer->yy_buf_cur_pos = yy_cp;

/* BOL is not needed, so there is no adjustment. */
#define YY_GET_BOL_STATE_ADJUSTMENT() 0


/* Go to the start state for scanning a new token. */
#define YY_GO_TO_START_STATE_FOR_NEW_TOKEN                       \
    yy_current_state =                                           \
      yy_lexer->yy_start_state + YY_GET_BOL_STATE_ADJUSTMENT();  \


#define YY_NUM_RULES 11
#define YY_END_OF_BUFFER 12
static const short int yy_accept[20] =
    {   0,
        0,    0,   12,   10,    8,    8,   10,    6,    7,    4,
        2,    3,    5,    1,    0,    1,    0,    9,    0
    } ;

static const int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    4,    1,    1,    1,    1,    5,
        6,    7,    8,    1,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const int yy_meta[13] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static const short int yy_base[20] =
    {   0,
        0,    0,   18,   19,   19,   19,    7,   19,   19,   19,
       19,   19,   19,    4,    8,    2,   10,   19,   19
    } ;

static const short int yy_def[20] =
    {   0,
       19,    1,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,    0
    } ;

static const short int yy_nxt[32] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,    4,
       13,   14,   18,   16,   17,   16,   15,   19,    3,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19
    } ;

static const short int yy_chk[32] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   17,   16,   15,   14,    7,    3,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19
    } ;


/* The intent behind this definition is that it'll catch
 * any uses of YY_REJECT which smflex missed. */
#define YY_REJECT YY_REJECT_used_but_option_reject_not_specified

#define YY_MORE_TEXT() YY_MORE_TEXT_used_but_option_yymore_not_specified
#define YY_MORE_LEN 0

#define INITIAL 0
#line 1 "arith.lex"
/* arith.lex
 * lexical analyzer for arithmetic language */




/* C++ declarations */
#include "arith.h"       // lexer, ArithTokenCodes


/* token definitions */
#line 441 "arithyy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */


/* Maximum number of bytes to read each time we call
 * 'yy_read_input_function'.  On some platforms, there can be a
 * significant speed advantage to reading using a "round" number,
 * such as a multiple of 0x800 (2048). */
#ifndef YY_MAX_READ_SIZE
#  define YY_MAX_READ_SIZE 8192
#endif

/* Size of default input buffer.  This should be larger than
 * YY_MAX_READ_SIZE because, when reading more data, there is usually
 * already some portion of a token in the buffer, and we will not read
 * more data than is available in the buffer. */
#ifndef YY_DEFAULT_BUF_ALLOC_SIZE
#  define YY_DEFAULT_BUF_ALLOC_SIZE 16384
#endif

/* Copy whatever the last rule matched to the output stream. */
#ifndef YY_ECHO
#  define YY_ECHO ((void)yy_lexer->yy_write_output_function(yy_lexer, \
                           yy_lexer->yy_text, yy_lexer->yy_leng))
#endif

/* No semi-colon after return; correct usage is to write "YY_TERMINATE();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef YY_TERMINATE
#  define YY_TERMINATE() return YY_EOF_TOKEN_CODE
#endif

/* Number of entries by which start-condition stack grows, on top of
 * doubling every time. */
#ifndef YY_START_STACK_INCR
#  define YY_START_STACK_INCR 25
#endif


/* Report an error.  This may return, in which case the scanner will
 * attempt to return control to the client so it can clean up. */
#define YY_ERROR(code, detail) \
  (yy_call_error_function(yy_lexer, code, detail))

static void yy_call_error_function(yy_lexer_t const *yy_lexer,
  yy_error_code_t code, char const *detail)
{
  /* Record the error in the lexer object, but only the first one. */
  if (yy_lexer->yy_error_code == yy_err_no_error) {
    /* Cast away constness.  I do not want to remove 'const' from the
     * functions that are conceptually just queries, nor do I want to
     * forgo enforcing prerequisites, nor do I want to abandon saving
     * the error code. */
    ((yy_lexer_t*)yy_lexer)->yy_error_code = code;
  }

  yy_lexer->yy_error_function(yy_lexer, code, detail);
}

/* Report the error 'yy_err_no_rule_matches'.  This macro is defined as
 * a convenience for code generation since the name of the error code
 * depends on the prefix. */
#define YY_ERROR_NO_RULE_MATCHES() \
  YY_ERROR(yy_err_no_rule_matches, NULL /*detail*/)


/* Code executed at the beginning of each rule, after yy_text and yy_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#  define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#  define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
  YY_USER_ACTION

int yy_lex(yy_lexer_t * const yy_lexer  )
{

  yy_state_type_t yy_current_state;
  char *yy_cp, *yy_bp;
  int yy_act;

  /* Prepare convenience aliases for important data.
   * These aliases can only be used directly within actions, not
   * in other functions, even those defined in sections 1 or 3. */
# define YY_TEXT (yy_lexer->yy_text)
# define YY_LENG (yy_lexer->yy_leng)
# define YY_GET_BOL() (yy_get_bol(yy_lexer))
# define YY_INPUT_STREAM (yy_lexer->yy_input_stream)
# define YY_OUTPUT_STREAM (yy_lexer->yy_output_stream)
# define YY_PUSH_START_CONDITION(cond) yy_push_start_condition(yy_lexer, cond)
# define YY_POP_START_CONDITION() yy_pop_start_condition(yy_lexer)
# define YY_TOP_START_CONDITION() yy_top_start_condition(yy_lexer)
# define YY_CONDITION_STACK_IS_EMPTY() yy_condition_stack_is_empty(yy_lexer)


#line 12 "arith.lex"


#line 551 "arithyy.cc"

  if (yy_lexer->yy_need_init) {
    yy_lexer->yy_need_init = 0;

    if (!yy_lexer->yy_current_buffer) {
      yy_lexer->yy_current_buffer =
        yy_create_buffer(yy_lexer, yy_lexer->yy_input_stream, 0 /*size*/);
      if (!yy_lexer->yy_current_buffer) {
        /* Error already reported, just try to get out. */
        return 0;
      }
    }

    yy_load_current_buffer_state(yy_lexer);
  }


  /* Loop over all tokens in the input until end-of-file. */
  while (1) {

    yy_cp = yy_lexer->yy_buf_cur_pos;

    /* Support of yy_text. */
    *yy_cp = yy_lexer->yy_hold_char;

    /* yy_bp points to the position in yy_buffer of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    /* Go to the start state for scanning the next token. */
    YY_GO_TO_START_STATE_FOR_NEW_TOKEN;

yy_match:
    do
    {
      YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
      if ( yy_accept[yy_current_state] )
      {
        yy_lexer->yy_last_accepting_state = yy_current_state;
        yy_lexer->yy_last_accepting_cpos = yy_cp;
      }
      while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
      {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 20 )
          yy_c = yy_meta[(unsigned int) yy_c];
      }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
      ++yy_cp;
    }
    while ( yy_current_state != 19 );
    yy_cp = yy_lexer->yy_last_accepting_cpos;
    yy_current_state = yy_lexer->yy_last_accepting_state;

yy_find_action:
    /* Find the action number and store it in 'yy_act'. */
    yy_act = yy_accept[yy_current_state];



    YY_DO_BEFORE_ACTION;


do_action:      /* This label is used only to access EOF actions. */


    switch (yy_act) { /* beginning of action switch */

      case 0: /* must back up */
      /* undo the effects of YY_DO_BEFORE_ACTION */
      *yy_cp = yy_lexer->yy_hold_char;
      yy_cp = yy_lexer->yy_last_accepting_cpos;
      yy_current_state = yy_lexer->yy_last_accepting_state;
      goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 14 "arith.lex"
{
  lexer.sval = (SemanticValue)atoi(YY_TEXT);
  return TOK_NUMBER;
}
#line 635 "arithyy.cc"
  YY_BREAK

/* operators, punctuators */
case 2:
YY_RULE_SETUP
#line 20 "arith.lex"
{ return TOK_PLUS; }
#line 643 "arithyy.cc"
  YY_BREAK
case 3:
YY_RULE_SETUP
#line 21 "arith.lex"
{ return TOK_MINUS; }
#line 649 "arithyy.cc"
  YY_BREAK
case 4:
YY_RULE_SETUP
#line 22 "arith.lex"
{ return TOK_TIMES; }
#line 655 "arithyy.cc"
  YY_BREAK
case 5:
YY_RULE_SETUP
#line 23 "arith.lex"
{ return TOK_DIVIDE; }
#line 661 "arithyy.cc"
  YY_BREAK
case 6:
YY_RULE_SETUP
#line 24 "arith.lex"
{ return TOK_LPAREN; }
#line 667 "arithyy.cc"
  YY_BREAK
case 7:
YY_RULE_SETUP
#line 25 "arith.lex"
{ return TOK_RPAREN; }
#line 673 "arithyy.cc"
  YY_BREAK

case 8:
YY_RULE_SETUP
#line 27 "arith.lex"
{
  /* whitespace; ignore */
}
#line 682 "arithyy.cc"
  YY_BREAK

case 9:
YY_RULE_SETUP
#line 31 "arith.lex"
{
  /* comment; ignore */
}
#line 691 "arithyy.cc"
  YY_BREAK

case 10:
YY_RULE_SETUP
#line 35 "arith.lex"
{
  printf("illegal character: %c\n", YY_TEXT[0]);
  /* but continue anyway */
}
#line 701 "arithyy.cc"
  YY_BREAK
case 11:
YY_RULE_SETUP
#line 39 "arith.lex"
#line 706 "arithyy.cc"
  YY_ECHO;
  YY_BREAK
#line 709 "arithyy.cc"
case YY_STATE_EOF(INITIAL):
  YY_TERMINATE();

/* Variant of 'yy_text' that is not a pointer to 'const'.  This is only
 * for use by the scanner internals, not user actions. */
#define YY_TEXT_NONCONST ((char*)(yy_lexer->yy_text))

      case YY_END_OF_BUFFER: {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int)(yy_cp - yy_lexer->yy_text) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yy_lexer->yy_hold_char;

        if (yy_lexer->yy_current_buffer->yy_buf_status == YY_BUF_STATUS_NEW) {
          /* We're scanning a new file or input source.  It's
           * possible that this happened because the user
           * just pointed yy_input_stream at a new source and called
           * yy_lex().  If so, then we have to assure
           * consistency between yy_current_buffer and our
           * globals.  Here is the right place to do so, because
           * this is the first action (other than possibly a
           * back-up) that will match for the new input source.
           */
          yy_lexer->yy_buf_data_len = yy_lexer->yy_current_buffer->yy_buf_data_len;
          yy_lexer->yy_current_buffer->yy_input_stream = yy_lexer->yy_input_stream;
          yy_lexer->yy_current_buffer->yy_buf_status   = YY_BUF_STATUS_NORMAL;
        }

        /* Note that here we test for yy_buf_cur_pos "<=" to the position
         * of the first EOB in the buffer, since yy_buf_cur_pos will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if (yy_lexer->yy_buf_cur_pos <=
              &yy_lexer->yy_current_buffer->yy_buffer[yy_lexer->yy_buf_data_len]) {
          /* This was really a NUL. */
          yy_state_type_t yy_next_state;

          yy_lexer->yy_buf_cur_pos =
            YY_TEXT_NONCONST + yy_amount_of_matched_text;

          yy_current_state = yy_get_previous_state(yy_lexer);

          /* Okay, we're now positioned to make the NUL
           * transition.  We couldn't have
           * yy_get_previous_state() go ahead and do it
           * for us because it doesn't know how to deal
           * with the possibility of jamming (and we don't
           * want to build jamming into it because then it
           * will run more slowly).
           */

          yy_next_state = yy_try_NUL_trans(yy_lexer, yy_current_state);

          yy_bp = YY_TEXT_NONCONST + YY_MORE_LEN;

          if (yy_next_state) {
            /* Consume the NUL. */
            yy_cp = ++(yy_lexer->yy_buf_cur_pos);
            yy_current_state = yy_next_state;
            goto yy_match;
          }

          else {
            yy_cp = yy_lexer->yy_last_accepting_cpos;
            yy_current_state = yy_lexer->yy_last_accepting_state;
            goto yy_find_action;
          }
        }

        else {
          switch (yy_get_next_buffer(yy_lexer)) {
            case EOB_ACT_END_OF_FILE: {
              if (yy_lexer->yy_wrap_function(yy_lexer)) {
                /* Note: because we've taken care in
                 * yy_get_next_buffer() to have set up
                 * yy_text, we can now set up
                 * yy_buf_cur_pos so that if some total
                 * hoser (like smflex itself) wants to
                 * call the scanner after we return the
                 * YY_EOF_TOKEN_CODE, it'll still work - another
                 * YY_EOF_TOKEN_CODE will get returned.
                 */
                yy_lexer->yy_buf_cur_pos = YY_TEXT_NONCONST + YY_MORE_LEN;

                yy_act = YY_STATE_EOF(YY_GET_START_CONDITION());
                goto do_action;
              }

              else {
                /* The 'yy_wrap_function' should have switched buffers
                 * or called 'yy_restart' to activate a new input file. */
              }
              break;
            }

            case EOB_ACT_CONTINUE_SCAN:
              yy_lexer->yy_buf_cur_pos =
                YY_TEXT_NONCONST + yy_amount_of_matched_text;

              yy_current_state = yy_get_previous_state(yy_lexer);

              yy_cp = yy_lexer->yy_buf_cur_pos;
              yy_bp = YY_TEXT_NONCONST + YY_MORE_LEN;
              goto yy_match;

            case EOB_ACT_LAST_MATCH:
              yy_lexer->yy_buf_cur_pos =
                &yy_lexer->yy_current_buffer->yy_buffer[yy_lexer->yy_buf_data_len];

              yy_current_state = yy_get_previous_state(yy_lexer);

              yy_cp = yy_lexer->yy_buf_cur_pos;
              yy_bp = YY_TEXT_NONCONST + YY_MORE_LEN;
              goto yy_find_action;
          } /* switch (yy_get_next_buffer()) */
        }

        break;
      } /* case YY_END_OF_BUFFER */

      default:
        YY_ERROR(yy_err_internal_error, "bad action code");
        return 0;
    } /* end of action switch */
  } /* end of scanning one token */
} /* end of yy_lex */


STATIC_IF_CPP void yy_construct(yy_lexer_t *yy_lexer)
{
  /* Note: We do not perform any memory allocation here.  Instead,
   * allocation is deferred to 'yy_lex()' when 'yy_need_init==1'.
   *
   * One reason for this is to not create a read buffer needlessly
   * in the case that we will use 'yy_scan_buffer'.
   *
   * Another reason is if we allocate, the allocation could fail, but
   * the client has not had an opportunity to set up an error handler
   * yet. */

  yy_lexer->yy_client_data = NULL;

  yy_lexer->yy_text = NULL;
  yy_lexer->yy_leng = 0;

  yy_lexer->yy_input_stream = (yy_input_stream_t*)stdin;
  yy_lexer->yy_output_stream = (yy_output_stream_t*)stdout;

  yy_lexer->yy_read_input_function   = &yy_read_input_with_fread;
  yy_lexer->yy_write_output_function = &yy_write_output_with_fwrite;
  yy_lexer->yy_wrap_function         = &yy_wrap_return_1;
  yy_lexer->yy_error_function        = &yy_error_print_and_exit;

  yy_lexer->yy_current_buffer = NULL;

  yy_lexer->yy_error_code = yy_err_no_error;

  yy_lexer->yy_hold_char = 0;
  yy_lexer->yy_buf_data_len = 0;

  yy_lexer->yy_buf_cur_pos = NULL;
  yy_lexer->yy_need_init = 1;
  YY_SET_START_CONDITION(INITIAL);

  yy_lexer->yy_last_accepting_state = 0; /* This can be a pointer. */
  yy_lexer->yy_last_accepting_cpos = NULL;

}


STATIC_IF_CPP void yy_destroy(yy_lexer_t *yy_lexer)
{
  /* We set freed pointers to NULL for a bit of extra safety. */

  yy_delete_buffer(yy_lexer, yy_lexer->yy_current_buffer);
  yy_lexer->yy_current_buffer = NULL;
}



/* Get more data by calling 'yy_read_input_function'.  Returns a
 * non-negative integer number of bytes read (since a read error is
 * treated like a 0-length read as part of error recovery), with 0
 * signalling end of file. */
static int yy_call_read_input(yy_lexer_t *yy_lexer, void *dest, int size)
{
  int n;

  YY_ASSERT(size >= 1);
  if (yy_lexer->yy_current_buffer->yy_is_interactive) {
    /* Read one character at a time. */
    size = 1;
  }

  n = yy_lexer->yy_read_input_function(yy_lexer, dest, size);
  if (n < 0) {
    YY_ERROR(yy_err_input_error, NULL /*detail*/);

    /* Recover by pretending we saw EOF. */
    n = 0;
  }

#ifdef YY_ENABLE_DEBUG_LOG_CALL
  {
    int c = n==0? 0 : ((char*)dest)[0];
    printf("[n=%d c=%d]\n", n, c);
  }
#endif

  return n;
}


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *      EOB_ACT_LAST_MATCH -
 *      EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *      EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(yy_lexer_t *yy_lexer)
{
  char *dest = yy_lexer->yy_current_buffer->yy_buffer;
  char *source = YY_TEXT_NONCONST;
  int number_to_move, i;
  int ret_val;

  if (yy_lexer->yy_buf_cur_pos >
        &yy_lexer->yy_current_buffer->yy_buffer[yy_lexer->yy_buf_data_len + 1]) {
    YY_ERROR(yy_err_internal_error, "end of buffer missed");
    return EOB_ACT_END_OF_FILE;
  }

  if (yy_lexer->yy_current_buffer->yy_fill_buffer == 0) { /* Don't try to fill the buffer, so this is an EOF. */
    if (yy_lexer->yy_buf_cur_pos - yy_lexer->yy_text - YY_MORE_LEN == 1) {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
    }

    else {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int) (yy_lexer->yy_buf_cur_pos - yy_lexer->yy_text) - 1;

  for (i = 0; i < number_to_move; ++i) {
    *(dest++) = *(source++);
  }

  if (yy_lexer->yy_current_buffer->yy_buf_status == YY_BUF_STATUS_EOF_PENDING) {
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    yy_lexer->yy_buf_data_len = 0;
    yy_lexer->yy_current_buffer->yy_buf_data_len = 0;
  }

  else {
    int num_to_read = yy_lexer->yy_current_buffer->yy_buf_alloc_size - number_to_move - 1;

    while (num_to_read <= 0) {  /* Not enough room in the buffer - grow it. */
      /* just a shorter name for the current buffer */
      yy_buffer_state_t *b = yy_lexer->yy_current_buffer;

      int yy_c_buf_p_offset = (int) (yy_lexer->yy_buf_cur_pos - b->yy_buffer);

      if (b->yy_is_our_buffer) {
        int new_size;
        char *new_buffer;

        /* Check for arithemtic overflow calculating new size. */
        if (b->yy_buf_alloc_size > (INT_MAX-2) / 2) {
          YY_ERROR(yy_err_input_buffer_at_max_size, NULL /*detail*/);
          return EOB_ACT_END_OF_FILE;
        }
        new_size = b->yy_buf_alloc_size * 2;

        /* Allocate a new buffer. */
        YY_DEBUG_LOG_MEM("allocate new buffer", new_size + 2);
        new_buffer = (char*)yy_flex_alloc(new_size + 2);
        if (!new_buffer) {
          YY_ERROR(yy_err_out_of_memory, "while expanding input buffer");
          return EOB_ACT_END_OF_FILE;
        }

        /* Copy the old data, including the EOB characters. */
        memcpy(new_buffer, b->yy_buffer, b->yy_buf_alloc_size + 2);

        /* Release the old buffer and update the fields. */
        yy_flex_free(b->yy_buffer);
        b->yy_buffer = new_buffer;
        b->yy_buf_alloc_size = new_size;
      }
      else {
        /* This happens if we think we need more input to get a match,
         * but we are using 'yy_scan_buffer' and there is no more data.
         * But in that case, why did we not already see the end of
         * buffer markers? */
        YY_ERROR(yy_err_internal_error, "expanding un-owned input buffer");
        return EOB_ACT_END_OF_FILE;
      }

      yy_lexer->yy_buf_cur_pos = &b->yy_buffer[yy_c_buf_p_offset];

      num_to_read = yy_lexer->yy_current_buffer->yy_buf_alloc_size - number_to_move - 1;
    }

    if (num_to_read > YY_MAX_READ_SIZE) {
      num_to_read = YY_MAX_READ_SIZE;
    }

    /* Read in more data. */
    yy_lexer->yy_buf_data_len =
      yy_call_read_input(yy_lexer,
        &yy_lexer->yy_current_buffer->yy_buffer[number_to_move],
        num_to_read);

    yy_lexer->yy_current_buffer->yy_buf_data_len = yy_lexer->yy_buf_data_len;
  }

  if (yy_lexer->yy_buf_data_len == 0) {
    if (number_to_move == YY_MORE_LEN) {
      ret_val = EOB_ACT_END_OF_FILE;
      yy_restart(yy_lexer, yy_lexer->yy_input_stream);
    }

    else {
      ret_val = EOB_ACT_LAST_MATCH;
      yy_lexer->yy_current_buffer->yy_buf_status = YY_BUF_STATUS_EOF_PENDING;
    }
  }

  else {
    ret_val = EOB_ACT_CONTINUE_SCAN;
  }

  yy_lexer->yy_buf_data_len += number_to_move;
  yy_lexer->yy_current_buffer->yy_buffer[yy_lexer->yy_buf_data_len] = YY_END_OF_BUFFER_CHAR;
  yy_lexer->yy_current_buffer->yy_buffer[yy_lexer->yy_buf_data_len + 1] = YY_END_OF_BUFFER_CHAR;

  yy_lexer->yy_text = &yy_lexer->yy_current_buffer->yy_buffer[0];

  return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */
static yy_state_type_t yy_get_previous_state(yy_lexer_t *yy_lexer)
{
  yy_state_type_t yy_current_state;
  char *yy_cp;

  /* Reset to the scanning start state. */
  YY_GO_TO_START_STATE_FOR_NEW_TOKEN;

  /* Rescan the text. */
  for (yy_cp = YY_TEXT_NONCONST + YY_MORE_LEN;
       yy_cp < yy_lexer->yy_buf_cur_pos;
       ++yy_cp) {
    YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if ( yy_accept[yy_current_state] )
    {
      yy_lexer->yy_last_accepting_state = yy_current_state;
      yy_lexer->yy_last_accepting_cpos = yy_cp;
    }
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
      yy_current_state = (int) yy_def[yy_current_state];
      if ( yy_current_state >= 20 )
        yy_c = yy_meta[(unsigned int) yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
  }

  return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *      next_state = yy_try_NUL_trans(yy_lexer, current_state);
 */
static yy_state_type_t yy_try_NUL_trans(yy_lexer_t *yy_lexer, yy_state_type_t yy_current_state)
{
  int yy_is_jam;
  char *yy_cp = yy_lexer->yy_buf_cur_pos;

  YY_CHAR yy_c = 1;
  if ( yy_accept[yy_current_state] )
  {
    yy_lexer->yy_last_accepting_state = yy_current_state;
    yy_lexer->yy_last_accepting_cpos = yy_cp;
  }
  while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
  {
    yy_current_state = (int) yy_def[yy_current_state];
    if ( yy_current_state >= 20 )
      yy_c = yy_meta[(unsigned int) yy_c];
  }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
  yy_is_jam = (yy_current_state == 19);

  return yy_is_jam ? 0 : yy_current_state;
}






STATIC_IF_CPP void yy_restart(yy_lexer_t *yy_lexer, yy_input_stream_t *input_file)
{
  if (!yy_lexer->yy_current_buffer) {
    yy_lexer->yy_current_buffer =
      yy_create_buffer(yy_lexer, input_file, 0 /*size*/);
    if (!yy_lexer->yy_current_buffer) {
      return;     /* Error already reported, try to recover. */
    }

    /* Copy the cur_pos, data_len, and input_stream from current_buffer. */
    yy_load_current_buffer_state(yy_lexer);
  }
  else {
    /* This will call 'yy_load_current_buffer_state'. */
    yy_init_buffer(yy_lexer, yy_lexer->yy_current_buffer, input_file);
  }
}



STATIC_IF_CPP void yy_switch_to_buffer(yy_lexer_t *yy_lexer, yy_buffer_state_t *new_buffer)
{
  YY_API_PRECONDITION(new_buffer != NULL);

  if (yy_lexer->yy_current_buffer == new_buffer) {
    return;
  }

  if (yy_lexer->yy_current_buffer) {
    /* Replace the hold character so the old read buffer is intact. */
    *(yy_lexer->yy_buf_cur_pos) = yy_lexer->yy_hold_char;

    /* Save the duplicate fields back into the old buffer so they can
     * be restored when we later switch back. */
    yy_lexer->yy_current_buffer->yy_buf_cur_pos  = yy_lexer->yy_buf_cur_pos;
    yy_lexer->yy_current_buffer->yy_buf_data_len = yy_lexer->yy_buf_data_len;
  }

  yy_lexer->yy_current_buffer = new_buffer;

  /* Load the duplicate fields. */
  yy_load_current_buffer_state(yy_lexer);
}



/* Copy the fields from 'yy_lexer->yy_current_buffer' that are
 * duplicated in the 'yy_lexer_t' structure.
 *
 * Also set up 'yy_text' and 'yy_hold_char'. */
static void yy_load_current_buffer_state(yy_lexer_t *yy_lexer)
{
  /* Copy duplicated fields. */
  yy_lexer->yy_buf_data_len = yy_lexer->yy_current_buffer->yy_buf_data_len;
  yy_lexer->yy_buf_cur_pos  = yy_lexer->yy_current_buffer->yy_buf_cur_pos;
  yy_lexer->yy_input_stream = yy_lexer->yy_current_buffer->yy_input_stream;

  /* Set up 'yy_text'.  TODO: Why is this necessary? */
  yy_lexer->yy_text      =   yy_lexer->yy_buf_cur_pos;

  /* Establish the 'yy_hold_char' invariant. */
  yy_lexer->yy_hold_char = *(yy_lexer->yy_buf_cur_pos);
}


STATIC_IF_CPP yy_buffer_state_t *yy_create_buffer(
  yy_lexer_t *yy_lexer, yy_input_stream_t *file, int size)
{
  yy_buffer_state_t *b;

  b = (yy_buffer_state_t*)yy_flex_alloc(sizeof(yy_buffer_state_t));
  if (!b) {
    YY_ERROR(yy_err_out_of_memory, "yy_create_buffer: buffer structure");
    return NULL;
  }

  YY_API_PRECONDITION(size >= 0);
  YY_API_PRECONDITION(size < INT_MAX-2);

  if (size == 0) {
    /* Unspecified size becomes 'YY_DEFAULT_BUF_ALLOC_SIZE'. */
    size = YY_DEFAULT_BUF_ALLOC_SIZE;
  }
  b->yy_buf_alloc_size = size;

  /* yy_buffer has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_buffer = (char*)yy_flex_alloc(b->yy_buf_alloc_size + 2);
  if (!b->yy_buffer) {
    yy_flex_free(b);
    YY_ERROR(yy_err_out_of_memory, "yy_create_buffer: input buffer");
    return NULL;
  }

  b->yy_is_our_buffer = 1;

  yy_init_buffer(yy_lexer, b, file);

  return b;
}



STATIC_IF_CPP void yy_delete_buffer(
  yy_lexer_t *yy_lexer, yy_buffer_state_t *b)
{
  if (!b) {
    return;
  }

  if (yy_lexer->yy_current_buffer == b) {
    /* Return to the state of not having a current buffer. */
    yy_lexer->yy_current_buffer = NULL;
  }

  if (b->yy_is_our_buffer) {
    yy_flex_free((void*)b->yy_buffer);
  }

  yy_flex_free((void*)b);
}



static void yy_init_buffer(yy_lexer_t *yy_lexer,
                           yy_buffer_state_t *b, yy_input_stream_t *file)
{
  b->yy_input_stream = file;
  b->yy_fill_buffer = 1;

  /* Flush *after* setting the input stream of 'b', because 'flush'
   * calls 'load' which copies the input stream into 'yy_lexer'. */
  yy_flush_buffer(yy_lexer, b);

  b->yy_is_interactive = 0;
  YY_DEBUG_LOG_CALL("default behavior, so yy_is_interactive is", b->yy_is_interactive);
}


STATIC_IF_CPP void yy_flush_buffer(
  yy_lexer_t *yy_lexer, yy_buffer_state_t *b)
{
  if (!b) {
    return;
  }

  b->yy_buf_data_len = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_buffer[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_buffer[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_cur_pos = &b->yy_buffer[0];

  b->yy_at_bol = 1;
  b->yy_buf_status = YY_BUF_STATUS_NEW;

  if (b == yy_lexer->yy_current_buffer) {
    yy_load_current_buffer_state(yy_lexer);
  }
}











STATIC_IF_CPP yy_error_code_t yy_get_error(yy_lexer_t const *yy_lexer)
{
  return yy_lexer->yy_error_code;
}



/* Table of error messages. */
static char const * const yy_error_string_table[] = {
  "no error",
  "internal error",
  "API misused",
  "error reading input source",
  "token is too large and input buffer cannot be expanded",
  "token is too large and input buffer is already at maximum size",
  "no rule matches the input text",
  "out of memory",
};


STATIC_IF_CPP char const *yy_error_string(yy_error_code_t code)
{
  /* Make sure the table is kept in sync with the enumeration. */
  YY_STATIC_ASSERT(sizeof(yy_error_string_table) /
                   sizeof(yy_error_string_table[0]) == yy_err_num_error_codes);

  /* Forcing an unsigned comparison takes care of negatives while also
   * avoiding a possible compiler warning if the underlying type of
   * 'yy_error_code_t' is unsigned and we explicitly checked against 0. */
  if ((unsigned)code < (unsigned)yy_err_num_error_codes) {
    return yy_error_string_table[code];
  }
  else {
    return "invalid error code";
  }
}



STATIC_IF_CPP void yy_error_print_and_exit(yy_lexer_t const *yy_lexer,
  yy_error_code_t code, char const *detail)
{
  if (detail) {
    fprintf(stderr, "smflex scanner error: %s: %s\n",
            yy_error_string(code), detail);
  }
  else {
    fprintf(stderr, "smflex scanner error: %s\n", yy_error_string(code));
  }

  /* For fatal-ish error messages, I want to have the best chance of
   * seeing the message before the program dies. */
  fflush(stderr);

  /* I do not allow these error codes to be directly customized (for
   * example with an #ifdef) because I want to limit the exposed
   * configuration surface.  If an 'smflex' user wants different codes,
   * they should define their own error handling function. */

  if (code == yy_err_internal_error ||
      code == yy_err_api_misuse) {
    /* These codes indicate there is a bug in the program. */
    exit(4);
  }
  else {
    /* The rest are "normal" errors, such as an input read error or when
     * some implementation limit is hit. */
    exit(2);
  }
}




STATIC_IF_CPP void yy_less_text(yy_lexer_t *yy_lexer, int new_yy_leng)
{
  if (!YY_API_PRECONDITION(0 <= new_yy_leng &&
                                new_yy_leng <= yy_lexer->yy_leng)) {
    return;
  }

  /* Undo effects of setting up yy_text. */
  YY_TEXT_NONCONST[yy_lexer->yy_leng] = yy_lexer->yy_hold_char;

  /* Move the end-of-token pointer to the specified location. */
  yy_lexer->yy_buf_cur_pos = YY_TEXT_NONCONST + new_yy_leng;
  yy_lexer->yy_leng = new_yy_leng;

  /* Re-insert the temporary NUL terminator. */
  yy_lexer->yy_hold_char = *(yy_lexer->yy_buf_cur_pos);
  *(yy_lexer->yy_buf_cur_pos) = '\0';
}



/* When this symbol is defined, enable mechanisms to inject failures
 * into the allocator routines. */
#ifdef YY_ALLOCATOR_FAILURE_INJECTION
/* Number of 'alloc' calls before we inject a failure. */
unsigned yy_alloc_failure_countdown = 0;
#endif

static long yy_num_allocated_objects = 0;

static void *yy_flex_alloc(int size)
{
  void *ret;

  YY_DEBUG_LOG_MEM("yy_flex_alloc", size);
#ifdef YY_ALLOCATOR_FAILURE_INJECTION
  if (--yy_alloc_failure_countdown == 0) {
    YY_DEBUG_LOG_MEM("alloc_fail", size);
    return NULL;
  }
#endif

  ret = malloc(size);
  if (ret) {
    yy_num_allocated_objects++;
  }
  return ret;
}

static void yy_flex_free(void *ptr)
{
  if (ptr) {
    yy_num_allocated_objects--;
    YY_DEBUG_LOG_MEM("yy_flex_free", yy_num_allocated_objects);
  }
  free(ptr);
}


STATIC_IF_CPP void yy_check_for_memory_leaks()
{
  if (yy_num_allocated_objects != 0) {
    fprintf(stderr, "yy_check_for_memory_leaks: leaked %ld objects\n",
            yy_num_allocated_objects);
    exit(4);
  }
}



STATIC_IF_CPP void yy_set_start_condition(yy_lexer_t *yy_lexer, int state)
{
  YY_SET_START_CONDITION(state);
}



STATIC_IF_CPP int yy_get_start_condition(yy_lexer_t const *yy_lexer)
{
  return YY_GET_START_CONDITION();
}



int yy_read_input_with_fread(yy_lexer_t *yy_lexer,
  void *dest, int size)
{
  FILE *input_file = (FILE*)(yy_lexer->yy_input_stream);

  int n = fread(dest, 1, size, input_file);
  if (n == 0 && ferror(input_file)) {
    return -1;
  }
  return n;
}




int yy_write_output_with_fwrite(yy_lexer_t *yy_lexer,
  void const *dest, int size)
{
  FILE *output_file = (FILE*)(yy_lexer->yy_output_stream);

  size_t n = fwrite(dest, 1, size, output_file);
  if (n == (size_t)size) {
    return size;
  }
  else {
    return -1;
  }
}


int yy_wrap_return_1(yy_lexer_t *yy_lexer)
{
  return 1;      /* No more files. */
}





/* Remove undocumented YY_XXX macros I don't want leaking into the
 * namespace of section 3. */
#undef YY_ERROR
#undef YY_WRAPPER_OBJECT
#undef YY_TEXT_NONCONST
#undef YY_DEFAULT_BUF_ALLOC_SIZE
#undef YY_GET_BOL_STATE_ADJUSTMENT
#undef YY_GO_TO_START_STATE_FOR_NEW_TOKEN
#undef YY_STATE_BUF_EXTRA_ELTS
#undef YY_CHECK_STATE_PTR_BOUNDS

/* Remove documented YY_XXX macros, as they cannot be used in section 3.
 * Most of them have yy_XXX alternatives that accept 'yy_lexer_t*'. */
#undef YY_SET_START_CONDITION
#undef YY_GET_START_CONDITION
#undef YY_LESS_TEXT
#undef YY_CURRENT_BUFFER
#undef YY_FLUSH_CURRENT_BUFFER
#undef YY_GET_BOL
#undef YY_ECHO
#undef YY_TERMINATE
#undef YY_TEXT
#undef YY_LENG
#undef YY_INPUT_STREAM
#undef YY_OUTPUT_STREAM
#undef YY_PUSH_START_CONDITION
#undef YY_POP_START_CONDITION
#undef YY_TOP_START_CONDITION
#undef YY_CONDITION_STACK_IS_EMPTY

/* After this point, the user's section 3 code appears. */
#line 39 "arith.lex"
